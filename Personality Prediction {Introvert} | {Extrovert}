{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91718,"databundleVersionId":12738969,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2025-07-31T17:43:48.374878Z","iopub.execute_input":"2025-07-31T17:43:48.375885Z","iopub.status.idle":"2025-07-31T17:43:48.384231Z","shell.execute_reply.started":"2025-07-31T17:43:48.375802Z","shell.execute_reply":"2025-07-31T17:43:48.383216Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Problem Definition\n\n**Objective:** Predict whether an individual is Introvert or Extrovert based on behavioral survey data.\n\n\n**Business Context:** Understand patterns of social behavior to aid personalized recommendations.\n\n\n**Target Variable:** Personality (Introvert/Extrovert)","metadata":{}},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"# Required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.385478Z","iopub.execute_input":"2025-07-31T17:43:48.385715Z","iopub.status.idle":"2025-07-31T17:43:48.400522Z","shell.execute_reply.started":"2025-07-31T17:43:48.385691Z","shell.execute_reply":"2025-07-31T17:43:48.399560Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load and Inspect Data","metadata":{}},{"cell_type":"code","source":"# File paths\ntrain_path = \"/kaggle/input/playground-series-s5e7/train.csv\"\ntest_path = \"/kaggle/input/playground-series-s5e7/test.csv\"","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.401546Z","iopub.execute_input":"2025-07-31T17:43:48.401886Z","iopub.status.idle":"2025-07-31T17:43:48.424882Z","shell.execute_reply.started":"2025-07-31T17:43:48.401858Z","shell.execute_reply":"2025-07-31T17:43:48.423880Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\n\nprint(\"Train shape:\", train_df.shape)\nprint(\"Test shape:\", test_df.shape)\ntrain_df.head()\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.426633Z","iopub.execute_input":"2025-07-31T17:43:48.426984Z","iopub.status.idle":"2025-07-31T17:43:48.475644Z","shell.execute_reply.started":"2025-07-31T17:43:48.426960Z","shell.execute_reply":"2025-07-31T17:43:48.474787Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Separate features and target\ntarget_col = 'Personality'  # Adjust based on your dataset\ncategorical_cols = train_df.select_dtypes(include='object').columns.drop(target_col)\nnumeric_cols = train_df.select_dtypes(include=['int64', 'float64']).columns","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.476590Z","iopub.execute_input":"2025-07-31T17:43:48.476929Z","iopub.status.idle":"2025-07-31T17:43:48.482915Z","shell.execute_reply.started":"2025-07-31T17:43:48.476909Z","shell.execute_reply":"2025-07-31T17:43:48.482057Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Check Missing & Data Types \ntrain_df.info()\n\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.483616Z","iopub.execute_input":"2025-07-31T17:43:48.484001Z","iopub.status.idle":"2025-07-31T17:43:48.509761Z","shell.execute_reply.started":"2025-07-31T17:43:48.483970Z","shell.execute_reply":"2025-07-31T17:43:48.508782Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.511592Z","iopub.execute_input":"2025-07-31T17:43:48.511837Z","iopub.status.idle":"2025-07-31T17:43:48.522146Z","shell.execute_reply.started":"2025-07-31T17:43:48.511797Z","shell.execute_reply":"2025-07-31T17:43:48.521319Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Visualize Target Distribution","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=train_df, x='Personality', palette='Set2')\nplt.title(\"Target Label Distribution\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.523084Z","iopub.execute_input":"2025-07-31T17:43:48.523311Z","iopub.status.idle":"2025-07-31T17:43:48.677997Z","shell.execute_reply.started":"2025-07-31T17:43:48.523294Z","shell.execute_reply":"2025-07-31T17:43:48.677131Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#check correlation\nplt.figure(figsize=(12, 8))\nsns.heatmap(train_df.corr(numeric_only=True), annot=True, cmap='coolwarm')\nplt.title(\"Correlation Heatmap\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:48.678882Z","iopub.execute_input":"2025-07-31T17:43:48.679169Z","iopub.status.idle":"2025-07-31T17:43:49.021842Z","shell.execute_reply.started":"2025-07-31T17:43:48.679140Z","shell.execute_reply":"2025-07-31T17:43:49.021045Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Box plot to visualise\nnumerics = train_df.select_dtypes(include=['float64', 'int64']).columns\n\nfor col in numerics:\n    plt.figure(figsize=(6, 4))\n    sns.boxplot(x='Personality', y=col, data=train_df)\n    plt.title(f'{col} Distribution by Personality')\n    plt.tight_layout()\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:49.024079Z","iopub.execute_input":"2025-07-31T17:43:49.024398Z","iopub.status.idle":"2025-07-31T17:43:50.028112Z","shell.execute_reply.started":"2025-07-31T17:43:49.024380Z","shell.execute_reply":"2025-07-31T17:43:50.027353Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Preprocess dataset","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBClassifier\n\n# Data preprocessing function\ndef preprocess_data(train, test, target_column='Personality'):\n    train = train.copy()\n    test = test.copy()\n\n    X = train.drop([target_column, 'id'], axis=1)\n    y = train[target_column]\n    X_test = test.drop(['id'], axis=1)\n    test_ids = test['id']\n\n    # Label encode target\n    le = LabelEncoder()\n    y_encoded = le.fit_transform(y)\n\n    # Encode categorical features\n    for col in X.columns:\n        if X[col].dtype == 'object':\n            X[col] = X[col].astype('category').cat.codes\n            X_test[col] = X_test[col].astype('category').cat.codes\n\n    return X, y_encoded, X_test, test_ids, le","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:43:50.029019Z","iopub.execute_input":"2025-07-31T17:43:50.029332Z","iopub.status.idle":"2025-07-31T17:43:50.036499Z","shell.execute_reply.started":"2025-07-31T17:43:50.029311Z","shell.execute_reply":"2025-07-31T17:43:50.035642Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Assuming train_df and test_df already loaded\nX, y, X_test, test_ids, le = preprocess_data(train_df, test_df)\nprint(\"✅ Data Preprocessing Completed.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:43:50.037624Z","iopub.execute_input":"2025-07-31T17:43:50.037967Z","iopub.status.idle":"2025-07-31T17:43:50.072114Z","shell.execute_reply.started":"2025-07-31T17:43:50.037929Z","shell.execute_reply":"2025-07-31T17:43:50.071194Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Define pipelines","metadata":{}},{"cell_type":"code","source":"\nrf_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler()),\n    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))\n])\n\nxgb_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler()),\n    ('classifier', XGBClassifier(n_estimators=100, use_label_encoder=False, eval_metric='mlogloss', random_state=42))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:43:50.073244Z","iopub.execute_input":"2025-07-31T17:43:50.073588Z","iopub.status.idle":"2025-07-31T17:43:50.078786Z","shell.execute_reply.started":"2025-07-31T17:43:50.073567Z","shell.execute_reply":"2025-07-31T17:43:50.078135Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Modeling & Evaluation\n","metadata":{}},{"cell_type":"code","source":"# Evaluate both models - Random Forest and XGboost\nrf_scores = cross_val_score(rf_pipeline, X, y, cv=5, scoring='accuracy')\nxgb_scores = cross_val_score(xgb_pipeline, X, y, cv=5, scoring='accuracy')\n\nprint(\"🌲 Random Forest Mean Accuracy:\", rf_scores.mean())\nprint(\"🚀 XGBoost Mean Accuracy:\", xgb_scores.mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:43:50.079720Z","iopub.execute_input":"2025-07-31T17:43:50.080048Z","iopub.status.idle":"2025-07-31T17:43:55.897055Z","shell.execute_reply.started":"2025-07-31T17:43:50.080020Z","shell.execute_reply":"2025-07-31T17:43:55.895560Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n# Create a pipeline with Imputer + Scaler + Model\nmodel_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='mean')),         # Handle NaNs\n    ('scaler', StandardScaler()),                        # Optional: Scale features\n    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))  # Model\n])\n\n# Evaluate using cross-validation\nscores = cross_val_score(model_pipeline, X, y, cv=5, scoring='accuracy')\n\n# Print results\nprint(\" ❌ Cross-validation Accuracy scores:\",scores)\nprint(\" ➡️ Mean accuracy:\", scores.mean())\n","metadata":{"execution":{"iopub.status.busy":"2025-07-31T17:43:55.897732Z","iopub.execute_input":"2025-07-31T17:43:55.897988Z","iopub.status.idle":"2025-07-31T17:44:01.003992Z","shell.execute_reply.started":"2025-07-31T17:43:55.897968Z","shell.execute_reply":"2025-07-31T17:44:01.003038Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Hyperparameter Tuning","metadata":{}},{"cell_type":"code","source":"# Hyperparameter Tuning for Random Forest\nparam_grid = {\n    'classifier__n_estimators': [100, 200],\n    'classifier__max_depth': [None, 10, 20],\n    'classifier__min_samples_split': [2, 4]  # ✅ min_samples_split cannot be 1\n}\n\ngrid_search = GridSearchCV(rf_pipeline, param_grid, cv=5, scoring='accuracy', n_jobs=-1)\ngrid_search.fit(X, y)\n\nprint(\"✅ Best Parameters:\", grid_search.best_params_)\nprint(\"✅ Best CV Accuracy:\", grid_search.best_score_)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:44:01.005081Z","iopub.execute_input":"2025-07-31T17:44:01.005789Z","iopub.status.idle":"2025-07-31T17:44:38.201521Z","shell.execute_reply.started":"2025-07-31T17:44:01.005767Z","shell.execute_reply":"2025-07-31T17:44:38.200777Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Predict on test","metadata":{}},{"cell_type":"code","source":"# Predict on test set using best estimator\ny_pred = grid_search.best_estimator_.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:44:38.204210Z","iopub.execute_input":"2025-07-31T17:44:38.204515Z","iopub.status.idle":"2025-07-31T17:44:38.337594Z","shell.execute_reply.started":"2025-07-31T17:44:38.204496Z","shell.execute_reply":"2025-07-31T17:44:38.336839Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Prepare submission","metadata":{}},{"cell_type":"code","source":"submission_df = pd.DataFrame({\n    'Id': test_ids,\n    'Predicted': le.inverse_transform(y_pred)  # If you want string labels back\n})\n\nsubmission_df.to_csv(\"submission.csv\", index=False)\nprint(\"✅ Submission saved to submission.csv\")\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:44:38.338396Z","iopub.execute_input":"2025-07-31T17:44:38.338694Z","iopub.status.idle":"2025-07-31T17:44:38.354051Z","shell.execute_reply.started":"2025-07-31T17:44:38.338667Z","shell.execute_reply":"2025-07-31T17:44:38.353184Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Preview\nsubmission_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:44:38.355057Z","iopub.execute_input":"2025-07-31T17:44:38.355320Z","iopub.status.idle":"2025-07-31T17:44:38.370143Z","shell.execute_reply.started":"2025-07-31T17:44:38.355299Z","shell.execute_reply":"2025-07-31T17:44:38.369229Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Visualise All","metadata":{}},{"cell_type":"code","source":"\n# 📊 Target Class Distribution\nsns.countplot(x=train_df['Personality'], palette='pastel')\nplt.title(\"Distribution of Personality Types in Training Data\")\nplt.xlabel(\"Personality\")\nplt.ylabel(\"Count\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:44:38.370941Z","iopub.execute_input":"2025-07-31T17:44:38.371159Z","iopub.status.idle":"2025-07-31T17:44:38.538524Z","shell.execute_reply.started":"2025-07-31T17:44:38.371141Z","shell.execute_reply":"2025-07-31T17:44:38.537618Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 🔥 Feature Correlation Heatmap (Corrected)\n# Drop non-numeric columns and calculate correlation\nnumeric_cols = train_df.select_dtypes(include=['number']).drop(columns=['id'])\ncorr_matrix = numeric_cols.corr()\n\n# Plot heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(corr_matrix, cmap='coolwarm', annot=True, fmt=\".2f\", linewidths=0.5)\nplt.title(\"Feature Correlation Heatmap\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:46:07.633270Z","iopub.execute_input":"2025-07-31T17:46:07.633622Z","iopub.status.idle":"2025-07-31T17:46:07.943205Z","shell.execute_reply.started":"2025-07-31T17:46:07.633598Z","shell.execute_reply":"2025-07-31T17:46:07.942556Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# 🌟 Feature Importances from Random Forest\nfinal_model = grid_search.best_estimator_.named_steps['classifier']\nimportances = final_model.feature_importances_\nfeature_names = train_df.drop(columns=['id', 'Personality']).columns\n\nfeat_imp_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': importances\n}).sort_values(by='Importance', ascending=False)\n\nplt.figure(figsize=(10, 6))\nsns.barplot(x='Importance', y='Feature', data=feat_imp_df, palette='viridis')\nplt.title(\"Feature Importances from Random Forest\")\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:46:28.263151Z","iopub.execute_input":"2025-07-31T17:46:28.263454Z","iopub.status.idle":"2025-07-31T17:46:28.653871Z","shell.execute_reply.started":"2025-07-31T17:46:28.263436Z","shell.execute_reply":"2025-07-31T17:46:28.653157Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# 📉 Confusion Matrix on Validation Set\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\nX_train_split, X_val_split, y_train_split, y_val_split = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\nbest_model = grid_search.best_estimator_\nbest_model.fit(X_train_split, y_train_split)\nval_preds = best_model.predict(X_val_split)\n\ncm = confusion_matrix(y_val_split, val_preds)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Introvert', 'Extrovert'])\ndisp.plot(cmap='Blues')\nplt.title(\"Confusion Matrix on Validation Set\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:46:32.603392Z","iopub.execute_input":"2025-07-31T17:46:32.603735Z","iopub.status.idle":"2025-07-31T17:46:34.309955Z","shell.execute_reply.started":"2025-07-31T17:46:32.603713Z","shell.execute_reply":"2025-07-31T17:46:34.308722Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# 🔁 Model Accuracy Comparison - Boxplot\nmodel_scores = pd.DataFrame({\n    'Model': ['Random Forest'] * len(rf_scores) + ['XGBoost'] * len(xgb_scores),\n    'Accuracy': list(rf_scores) + list(xgb_scores)\n})\nsns.boxplot(x='Model', y='Accuracy', data=model_scores, palette='Set2')\nplt.title(\"Model Comparison - Cross Validation Accuracy\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T17:46:37.983298Z","iopub.execute_input":"2025-07-31T17:46:37.983607Z","iopub.status.idle":"2025-07-31T17:46:38.129175Z","shell.execute_reply.started":"2025-07-31T17:46:37.983586Z","shell.execute_reply":"2025-07-31T17:46:38.128317Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<center> <strong>END of Notebook</strong </center>","metadata":{}}]}